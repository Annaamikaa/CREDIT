# -*- coding: utf-8 -*-
"""task 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rApsa519Jd7h-mLoUkCaT3UwRGEsyjAU

**CREDIT CARD FRAUD DETECTION**

**Introduction**

Credit card fraud is a pervasive threat in today's digital economy, posing risks to both consumers and financial institutions. It involves unauthorized transactions made using stolen or counterfeit credit card information, leading to financial losses and undermining trust in the financial system. Traditional rule-based systems often fall short in detecting sophisticated fraud patterns, necessitating the adoption of machine learning and AI techniques for more effective detection. This paper explores the challenges of credit card fraud, methodologies for detection, and the role of advanced analytics in combating fraudulent activities.
"""

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

# Load the dataset
data = pd.read_csv('/content/creditcard.csv')

data.head(10)

data.tail(10)

data.shape

data.info()

# Assume 'Class' column indicates fraud (1) or genuine (0) transactions
X = data.drop('Class', axis=1)
y = data['Class']

# Normalize the features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Drop rows with missing values in both X and y
import numpy as np

# Find rows with missing values in either X or y
missing_rows = np.isnan(X).any(axis=1) | np.isnan(y)

# Drop rows with missing values
X_cleaned = X[~missing_rows]
y_cleaned = y[~missing_rows]

# Handling class imbalance with reduced number of neighbors
smote = SMOTE(random_state=42, k_neighbors=3)  # Adjust k_neighbors as needed
X_resampled, y_resampled = smote.fit_resample(X_cleaned, y_cleaned)

# Splitting the dataset
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Training a classification algorithm
# Using Logistic Regression as an example
model = LogisticRegression(max_iter=1000)

model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Model evaluation
print(classification_report(y_test, y_pred))

# Instantiate the RandomForestClassifier with 100 estimators
model = RandomForestClassifier(n_estimators=100)

# Train the model on the resampled data
model.fit(X_resampled, y_resampled)

# Predictions on the test set
y_pred = model.predict(X_test)

# Model evaluation
print(classification_report(y_test, y_pred))

import matplotlib.pyplot as plt

# Count the number of fraudulent and genuine transactions
fraud_counts = data['Class'].value_counts()

# Plotting the pie chart
plt.figure(figsize=(8, 6))
plt.pie(fraud_counts, labels=['Genuine', 'Fraudulent'], autopct='%1.1f%%', colors=['skyblue', 'lightcoral'])
plt.title('Distribution of Credit Card Transactions')
plt.show()

"""In conclusion, the pie chart visually represents the distribution of credit card transactions, showcasing the proportion of genuine and fraudulent transactions. This visualization underscores the importance of addressing class imbalance in the dataset for effective fraud detection. The chart serves as a clear and concise summary of the dataset's composition, facilitating a better understanding of the data and informing subsequent analysis and modeling decisions."""

import matplotlib.pyplot as plt

# Count the number of fraudulent and genuine transactions
fraud_counts = data['Class'].value_counts()

# Plotting the bar plot
plt.figure(figsize=(8, 6))
fraud_counts.plot(kind='bar', color=['skyblue', 'lightcoral'])
plt.title('Distribution of Credit Card Transactions')
plt.xlabel('Transaction Type')
plt.ylabel('Count')
plt.xticks([0, 1], ['Genuine', 'Fraudulent'], rotation=0)
plt.show()

"""In conclusion, the bar plot provides a visual representation of the distribution of credit card transactions, distinguishing between genuine and fraudulent transactions. It highlights the stark contrast in the counts between the two types of transactions, emphasizing the imbalance in the dataset. This visualization underscores the need for addressing class imbalance during the model-building process to ensure accurate and effective fraud detection. Additionally, it serves as a clear summary of the dataset's composition, aiding in understanding and informing further analysis."""